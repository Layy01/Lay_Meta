# -*- coding: utf-8 -*-
"""Python_Test_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xbQ2i9MNszAbO9RYd7QejfhVFq5ZV2Pa

1. Explain Encapsulation with example and write python code.

Encapsulation in OOP refers to the bundling of data and methods hence incresing security. Two main concepts of encapsulation are data hiding and access modifiers. Banking system is a real life example where encapsulation can be used.
"""

# Creating Class
class Counter:
    def __init__(self, starting_value=0):
        self._count = starting_value

    def increment(self):
        self._count += 1

    def get_count(self):
        return self._count

# Creation Object
my_counter = Counter(10)
my_counter.increment() # Calling method

current_count = my_counter.get_count()

print(current_count)

"""2. Explain Polymorphism with example and write python code.

Polymorphism allows objects of different classes to be treated as objects of a common superclass. In simpler terms polymorphism means having many forms.There are mainly two types of polymorphism : Method Overriding and Method Overloading.
"""

# Creating Parent Class
class Animal:
    def make_sound(self):
        print("Generic animal sound")

# Creating Child Class
class Dog(Animal):
    def make_sound(self):
        print("Woof!")

# Creating Child Class
class Cat(Animal):
    def make_sound(self):
        print("Meow!")

# Creating Objects
dog = Dog()
cat = Cat()

# Calling Methods
dog.make_sound()
cat.make_sound()

"""3. Explain Single Level Inheritance with python code.

In single level inheritance only one class(sub class) inherits from another class(parent class). It is the simplest form of inheritance.
"""

# Creating Parent Class
class Vehicle:
    def __init__(self, make, model):
        self.make = make
        self.model = model

    def display_info(self):
        print(f"Vehicle Make: {self.make}, Model: {self.model}")

# Creating Sub-Class
class Car(Vehicle):
    def __init__(self, make, model, doors):
        super().__init__(make, model)
        self.doors = doors

    def display_details(self):
        self.display_info()
        print(f"Number of doors: {self.doors}")

# Creating Object and calling the method
my_car = Car("Toyota", "Corolla", 4)

my_car.display_details()

"""4. Explain Multiple inheritance with python code.

In multiple inheritance child class inherits properties and attributes from more than one parent class.
"""

# Created Parent class
class Terrestrial:
  def can_walk(self):
    print("Can walk on land")

# Created Parent Class
class Aquatic:
  def can_swim(self):
    print("Can swim in water")

# Created Sub-Class that inherits from both parents
class Frog(Terrestrial, Aquatic):
  pass

# Creating Objects and calling methods
my_frog = Frog()

my_frog.can_walk()
my_frog.can_swim()

"""5.  Explain Muti-level inheritance with python code

Multilevel inheritance occurs where a class child class inherits from a parent class, and this parent class, in turn, inherits from another class (grandparent class).
"""

# Parent Class
class Animal:
  def __init__(self, name):
    self.name = name

  def make_sound(self):
    print("animal sound")

# Sub-Class
class Mammal(Animal):
  def __init__(self, name, fur_color):
    super().__init__(name)
    self.fur_color = fur_color

# Sub-Class representing multi-level inheritance
class Dog(Mammal):
  def __init__(self, name, fur_color, breed):
    super().__init__(name, fur_color)
    self.breed = breed

  def bark(self):
    print("Woof! I'm a", self.breed)

my_dog = Dog("Buddy", "Brown", "Labrador")

print(my_dog.name)
print(my_dog.fur_color)
my_dog.bark()

"""6. What do you mean by conditional statements. Explain with python code

Conditional statements are used to control the flow of the program. There are many types of conditional statement such as If..else, switch case. There are variations of If...else which we can use such as we can use only if or we can use if..else ladder. we can also combine loops with this conditonal statements.
"""

# Creating Function to check eligibility
def can_drive(age):

  # Using Conditional statement to control the flow of the program
  if age >= 18:
    return "You are old enough to drive."
  else:
    return "You are not old enough to drive."

# Taking User Input
user_age = int(input("Enter your age: "))

# Check eligibility and print result
result = can_drive(user_age)
print(result)

"""7. What do you mean by decision making statements. Explain with python code.

Decision making statements lets you execute a block of condition based on certain conditions. Some Decision statements used in py are : If, if..else, if...elif..else, nested if etc.
"""

# Giving values to variables
x = 10
y = 5

# Using Nested-if statement
if x > 5:
    print("x is greater than 5")
    if y > 2:
        print("y is greater than 2")
    else:
        print("y is not greater than 2")
else:
    print("x is not greater than 5")

"""8.  Write a program of factorial in python"""

# Created a function for factorial having one parameter
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

# Calling the function by passing the argument
num = 5
print("Factorial of", num, "is:", factorial(num))

"""9. What do you understand by Functions? Explain with python code.

Function is a block of code that performs a specific task. Its a piece of reusable code that can be used by calling using its name when needed. We can pass arguments to a function while calling it.
"""

# Created a basic function for gretting using f-strings
def greet(name):
    return f"Hello, {name}!"

message = greet("Lay")
print(message)

"""10. How many pillars of Oops we have in Python?

Ans : We have 4 pillars of OOPS in Py which are
      
      1. Encapsulation
      2. Polymorphism
      3. Abstraction
      4. Inheritance
"""